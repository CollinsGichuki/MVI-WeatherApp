name: Build Debug APK and run Unit tests

on:
  pull_request:
    branches: [ "master" ]

permissions: write-all

jobs:
  build-tests:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Unit tests
        id: run_tests
        continue-on-error: true
        run: ./gradlew test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/tests/testDebugUnitTest/index.html

      - name: Lint Check
        id: lint_test
        continue-on-error: true
        run: ./gradlew lintDebug

      - name: Upload Lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint_results
          path: app/build/reports/lint-results-debug.html

      - name: Prepare Lint Report for Github Pages
        if: always()
        run: |
          mkdir -p lint-report
            cp app/build/reports/lint-results-debug.html lint-report/index.html

      - name: Deploy Lint Report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: lint-report
          publish_branch: gh-pages

  post-comment:
    name: Post Lint Report Comment
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@V4

      - name: Comment Lint Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          LINT_REPORT_URL: "https://${{ github.repository_owner }}.github.io/${{ github.repository }}/lint-report/index.html"
        with:
          script: |
            const fs = require('fs');
            const path = 'app/build/reports/lint-results-debug.html'
            let lintResults = 'No lint results found.'
            if (fs.existsSync(path)) {
              lintResults = fs.readFileSync(path, {encoding:'utf8'});
            }

            const errorMatches = lintResults.match(/<error/g) || [];
            const warningMatches = lintResults.match(/<warning/g) || [];
            const errorsCount = errorMatches.length;
            const warningsCount = warningMatches.length;

            // Retrieve the lint report URL from the environment.
            const lintReportUrl = process.env.LINT_REPORT_URL;

            const commentBody = `
            - **Errors:** ${errorsCount}
            - **Warnings:** ${warningsCount}

            For the full lint report, please [click here](${lintReportUrl}). `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => comment.body && comment.body.trim().startsWith(marker));
            
            if (existingComment) {
            console.log(`Updating existing comment ID: ${existingComment.id}`);
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody,
            });
            } else {
              console.log(`No existing comment found. Creating a new comment.`);
              await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
               });
             }
